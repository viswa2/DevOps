{
  "version": 4,
  "terraform_version": "1.4.2",
  "serial": 27,
  "lineage": "c1acd6ac-43d7-c7c9-c678-80db056eec11",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "template_file",
      "name": "ccc_health_script",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "680238a829fb2c0260c7d49e87f035e2cb62fca3e066356f9ce38694f386aef4",
            "rendered": "const request = require('request');\nconst assert = require('assert');\n\nconsole.log(arguments);\nconst failures = [];\nconst log = (msg) =\u003e {\n    console.log(msg);\n};\n\nconst assertTrue = (condition, message, failures) =\u003e {\n    if (condition) {\n        log(\"Success. \" + message);\n    } else {\n        log(\"Failure. \" + message);\n       failures.push(failures);\n    }\n};\n\nhealthcheck(\"www.health.com\");\n\nfunction healthcheck(url) {\n    log(\"--------------\");\n    log(`Target URL: ${url}`);\n    var startTime = new Date();\n\n    request(url, function (error, response, body) {\n        var endTime = new Date();\n        log(`Execution time: ${((endTime - startTime) / 1000.0).toFixed(2)}s`)\n        log(\"*** response ***\");\n        log(body);\n        log(\" *** generic checks ***\");\n        assertTrue(error == null, \"No errors expected in api call\", failures);\n        assertTrue(response != null, \"Response should NOT be empty\", failures);\n        assertTrue(body != null, \"Response body should NOT be empty\", failures);\n        assertTrue(response.statusCode === 200, `Response status code must be 200, actual is ${response.statusCode}`, failures);\n\n        if (body != null \u0026\u0026 response.statusCode === 200) {\n            log(\"*** body check ***\");\n            let health = JSON.parse(body);\n            // log('Just checking '+JSON.parse(body));\n            for (let key in health) {\n              if(key===\"ibmmblt\"){\n                assertTrue(health[key].success===true, \"\"+ health[key].message, failures);\n              }\n             \n        }\n        }\n        log(\"--------------\");\n\n        assert.ok(failures.length === 0, 'Failures detected');\n    });\n}\n",
            "template": "const request = require('request');\nconst assert = require('assert');\n\nconsole.log(arguments);\nconst failures = [];\nconst log = (msg) =\u003e {\n    console.log(msg);\n};\n\nconst assertTrue = (condition, message, failures) =\u003e {\n    if (condition) {\n        log(\"Success. \" + message);\n    } else {\n        log(\"Failure. \" + message);\n       failures.push(failures);\n    }\n};\n\nhealthcheck(\"${url}\");\n\nfunction healthcheck(url) {\n    log(\"--------------\");\n    log(`Target URL: $${url}`);\n    var startTime = new Date();\n\n    request(url, function (error, response, body) {\n        var endTime = new Date();\n        log(`Execution time: $${((endTime - startTime) / 1000.0).toFixed(2)}s`)\n        log(\"*** response ***\");\n        log(body);\n        log(\" *** generic checks ***\");\n        assertTrue(error == null, \"No errors expected in api call\", failures);\n        assertTrue(response != null, \"Response should NOT be empty\", failures);\n        assertTrue(body != null, \"Response body should NOT be empty\", failures);\n        assertTrue(response.statusCode === 200, `Response status code must be 200, actual is $${response.statusCode}`, failures);\n\n        if (body != null \u0026\u0026 response.statusCode === 200) {\n            log(\"*** body check ***\");\n            let health = JSON.parse(body);\n            // log('Just checking '+JSON.parse(body));\n            for (let key in health) {\n              if(key===\"ibmmblt\"){\n                assertTrue(health[key].success===true, \"\"+ health[key].message, failures);\n              }\n             \n        }\n        }\n        log(\"--------------\");\n\n        assert.ok(failures.length === 0, 'Failures detected');\n    });\n}\n",
            "vars": {
              "url": "www.health.com"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "9763d5147fb761f08ed01dda2f3cd6c1a856914949978a3192a7856e64087954",
            "rendered": "const request = require('request');\nconst assert = require('assert');\n\nconsole.log(arguments);\nconst failures = [];\nconst log = (msg) =\u003e {\n    console.log(msg);\n};\n\nconst assertTrue = (condition, message, failures) =\u003e {\n    if (condition) {\n        log(\"Success. \" + message);\n    } else {\n        log(\"Failure. \" + message);\n       failures.push(failures);\n    }\n};\n\nhealthcheck(\"www.example.com\");\n\nfunction healthcheck(url) {\n    log(\"--------------\");\n    log(`Target URL: ${url}`);\n    var startTime = new Date();\n\n    request(url, function (error, response, body) {\n        var endTime = new Date();\n        log(`Execution time: ${((endTime - startTime) / 1000.0).toFixed(2)}s`)\n        log(\"*** response ***\");\n        log(body);\n        log(\" *** generic checks ***\");\n        assertTrue(error == null, \"No errors expected in api call\", failures);\n        assertTrue(response != null, \"Response should NOT be empty\", failures);\n        assertTrue(body != null, \"Response body should NOT be empty\", failures);\n        assertTrue(response.statusCode === 200, `Response status code must be 200, actual is ${response.statusCode}`, failures);\n\n        if (body != null \u0026\u0026 response.statusCode === 200) {\n            log(\"*** body check ***\");\n            let health = JSON.parse(body);\n            // log('Just checking '+JSON.parse(body));\n            for (let key in health) {\n              if(key===\"onespan\"){\n                assertTrue(health[key].success===true, \"\"+ health[key].message, failures);\n              }\n             \n        }\n        }\n        log(\"--------------\");\n\n        assert.ok(failures.length === 0, 'Failures detected');\n    });\n}\n",
            "template": "const request = require('request');\nconst assert = require('assert');\n\nconsole.log(arguments);\nconst failures = [];\nconst log = (msg) =\u003e {\n    console.log(msg);\n};\n\nconst assertTrue = (condition, message, failures) =\u003e {\n    if (condition) {\n        log(\"Success. \" + message);\n    } else {\n        log(\"Failure. \" + message);\n       failures.push(failures);\n    }\n};\n\nhealthcheck(\"${url}\");\n\nfunction healthcheck(url) {\n    log(\"--------------\");\n    log(`Target URL: $${url}`);\n    var startTime = new Date();\n\n    request(url, function (error, response, body) {\n        var endTime = new Date();\n        log(`Execution time: $${((endTime - startTime) / 1000.0).toFixed(2)}s`)\n        log(\"*** response ***\");\n        log(body);\n        log(\" *** generic checks ***\");\n        assertTrue(error == null, \"No errors expected in api call\", failures);\n        assertTrue(response != null, \"Response should NOT be empty\", failures);\n        assertTrue(body != null, \"Response body should NOT be empty\", failures);\n        assertTrue(response.statusCode === 200, `Response status code must be 200, actual is $${response.statusCode}`, failures);\n\n        if (body != null \u0026\u0026 response.statusCode === 200) {\n            log(\"*** body check ***\");\n            let health = JSON.parse(body);\n            // log('Just checking '+JSON.parse(body));\n            for (let key in health) {\n              if(key===\"onespan\"){\n                assertTrue(health[key].success===true, \"\"+ health[key].message, failures);\n              }\n             \n        }\n        }\n        log(\"--------------\");\n\n        assert.ok(failures.length === 0, 'Failures detected');\n    });\n}\n",
            "vars": {
              "url": "www.example.com"
            }
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "bbae4af16cda4d4333d2062f5bb1d50d4ff038ad6ece49f7847f0a79a5cd7d83",
            "rendered": "const request = require('request');\nconst assert = require('assert');\n\nconsole.log(arguments);\nconst failures = [];\nconst log = (msg) =\u003e {\n    console.log(msg);\n};\n\nconst assertTrue = (condition, message, failures) =\u003e {\n    if (condition) {\n        log(\"Success. \" + message);\n    } else {\n        log(\"Failure. \" + message);\n       failures.push(failures);\n    }\n};\n\nhealthcheck(\"www.test.com\");\n\nfunction healthcheck(url) {\n    log(\"--------------\");\n    log(`Target URL: ${url}`);\n    var startTime = new Date();\n\n    request(url, function (error, response, body) {\n        var endTime = new Date();\n        log(`Execution time: ${((endTime - startTime) / 1000.0).toFixed(2)}s`)\n        log(\"*** response ***\");\n        log(body);\n        log(\" *** generic checks ***\");\n        assertTrue(error == null, \"No errors expected in api call\", failures);\n        assertTrue(response != null, \"Response should NOT be empty\", failures);\n        assertTrue(body != null, \"Response body should NOT be empty\", failures);\n        assertTrue(response.statusCode === 200, `Response status code must be 200, actual is ${response.statusCode}`, failures);\n\n        if (body != null \u0026\u0026 response.statusCode === 200) {\n            log(\"*** body check ***\");\n            let health = JSON.parse(body);\n            // log('Just checking '+JSON.parse(body));\n            for (let key in health) {\n              if(key===\"cccEmergencyActCron\"){\n                assertTrue(health[key].success===true, \"cccEmergencyAct\"+ health[key].message, failures);\n              }\n             \n        }\n        }\n        log(\"--------------\");\n\n        assert.ok(failures.length === 0, 'Failures detected');\n    });\n}\n",
            "template": "const request = require('request');\nconst assert = require('assert');\n\nconsole.log(arguments);\nconst failures = [];\nconst log = (msg) =\u003e {\n    console.log(msg);\n};\n\nconst assertTrue = (condition, message, failures) =\u003e {\n    if (condition) {\n        log(\"Success. \" + message);\n    } else {\n        log(\"Failure. \" + message);\n       failures.push(failures);\n    }\n};\n\nhealthcheck(\"${url}\");\n\nfunction healthcheck(url) {\n    log(\"--------------\");\n    log(`Target URL: $${url}`);\n    var startTime = new Date();\n\n    request(url, function (error, response, body) {\n        var endTime = new Date();\n        log(`Execution time: $${((endTime - startTime) / 1000.0).toFixed(2)}s`)\n        log(\"*** response ***\");\n        log(body);\n        log(\" *** generic checks ***\");\n        assertTrue(error == null, \"No errors expected in api call\", failures);\n        assertTrue(response != null, \"Response should NOT be empty\", failures);\n        assertTrue(body != null, \"Response body should NOT be empty\", failures);\n        assertTrue(response.statusCode === 200, `Response status code must be 200, actual is $${response.statusCode}`, failures);\n\n        if (body != null \u0026\u0026 response.statusCode === 200) {\n            log(\"*** body check ***\");\n            let health = JSON.parse(body);\n            // log('Just checking '+JSON.parse(body));\n            for (let key in health) {\n              if(key===\"cccEmergencyActCron\"){\n                assertTrue(health[key].success===true, \"cccEmergencyAct\"+ health[key].message, failures);\n              }\n             \n        }\n        }\n        log(\"--------------\");\n\n        assert.ok(failures.length === 0, 'Failures detected');\n    });\n}\n",
            "vars": {
              "url": "www.test.com"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_synthetics_monitor",
      "name": "ccc_health_check",
      "provider": "provider[\"registry.terraform.io/newrelic/newrelic\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "bypass_head_request": false,
            "frequency": 60,
            "id": "1fa222ce-c92c-4d27-a180-f5f51f832452",
            "locations": [
              "AWS_EU_NORTH_1"
            ],
            "name": "[prd] CCC Health",
            "sla_threshold": 7,
            "status": "ENABLED",
            "treat_redirect_as_failure": false,
            "type": "SCRIPT_API",
            "uri": "",
            "validation_string": "",
            "verify_ssl": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "newrelic_synthetics_monitor_script",
      "name": "ccc_health_script",
      "provider": "provider[\"registry.terraform.io/newrelic/newrelic\"]",
      "instances": []
    }
  ],
  "check_results": null
}
